{"version":3,"sources":["serviceWorker.js","reducers/index.js","reducers/UpdateMessageReducer.js","components/DiffTable.jsx","actions/index.js","components/MessageDiffTool.jsx","index.js"],"names":["Boolean","window","location","hostname","match","rootReducer","combineReducers","value","state","left","right","diff","action","type","payload","leftSplit","split","rightSplit","leftField","tag","tagValue","rightField","useStyles","makeStyles","table","minWidth","DiffTable","classes","TableContainer","component","Paper","Table","className","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","Object","keys","map","key","scope","theme","root","flexGrow","MessageDiffTool","dispatch","useDispatch","Grid","container","spacing","item","xs","TextField","id","label","variant","multiline","fullWidth","onChange","e","target","useSelector","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e08f4fa1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\nimport { updateMessageReducer } from './UpdateMessageReducer'\n\nexport const rootReducer = combineReducers(\n    {\n        value: updateMessageReducer\n    }\n)","export const updateMessageReducer = (state={left: \"\", right: \"\", diff: {}}, action) => {\n    switch (action.type) {\n        case \"UPDATE_LEFT_MESSAGE\":\n            state = {\n                diff: {},\n                right: state.right,\n                left: action.payload\n                \n            }\n            break;\n        case \"UPDATE_RIGHT_MESSAGE\":\n            state = {\n                diff: {},\n                left: state.left,\n                right: action.payload\n            }\n            break;\n    }\n    var leftSplit = state.left.split(\"\\|\");\n    var rightSplit = state.right.split(\"|\");\n    for (var leftField of leftSplit) {\n        var tagValue = leftField.split(\"=\");\n        var tag = tagValue[0];\n        var value = tagValue[1];\n        state['diff'][tag] = {\n            ...state['diff'][tag],\n            left: value\n        }\n    }\n    for (var rightField of rightSplit) {\n        var tagValue = rightField.split(\"=\");\n        var tag = tagValue[0];\n        var value = tagValue[1];\n        state['diff'][tag] = {\n            ...state['diff'][tag],\n            right: value\n        }\n    }\n    return state\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function DiffTable({diff}) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"left\">Tag</TableCell>\n            <TableCell align=\"left\">Value - Left</TableCell>\n            <TableCell align=\"left\">Value - Right</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        {\n          Object.keys(diff).map((key) => (\n            <TableRow key={key}>\n              <TableCell component=\"th\" scope=\"row\">{key}</TableCell>\n              <TableCell align=\"left\">{diff[key].left}</TableCell>\n              <TableCell align=\"left\">{diff[key].right}</TableCell>\n          </TableRow>\n          ))\n        }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}","export const updateLeftMessage = (message) => {\n    return {\n        type: \"UPDATE_LEFT_MESSAGE\",\n        payload: message\n    }\n}\n\nexport const updateRightMessage = (message) => {\n    return {\n        type: \"UPDATE_RIGHT_MESSAGE\",\n        payload: message\n    }\n}","import React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport DiffTable from './DiffTable'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateLeftMessage, updateRightMessage } from '..//actions';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  }\n}));\n\nfunction MessageDiffTool() {\n  const dispatch = useDispatch()\n    return (\n      <div className={useStyles.root}>\n        <Grid container spacing={2}>\n          <Grid item xs={2}>\n              Message\n          </Grid>\n          <Grid item xs={10}>\n          </Grid>\n          <Grid item xs={6}>\n              <TextField id=\"standard-basic\" label=\"Message 1\" variant=\"outlined\" multiline fullWidth onChange={(e) => dispatch(updateLeftMessage(e.target.value))}/>\n          </Grid>\n          <Grid item xs={6}>\n              <TextField id=\"standard-basic\" label=\"Message 2\" variant=\"outlined\" multiline fullWidth onChange={(e) => dispatch(updateRightMessage(e.target.value))}/>\n          </Grid>\n          <Grid item xs={12}>\n              <DiffTable diff={useSelector(state => state.value.diff)}/>\n          </Grid>\n        </Grid>\n        {\n          /*\n          Left: {useSelector(state => state.value.left)}\n          <br/>\n          Right: {useSelector(state => state.value.right)}\n          <br/>\n          Diff: {JSON.stringify(useSelector(state => state.value.diff))}\n          */\n        }\n      </div>\n    );\n    }\n\nexport default MessageDiffTool;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { rootReducer } from './reducers'\nimport MessageDiffTool from './components/MessageDiffTool'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <MessageDiffTool />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}